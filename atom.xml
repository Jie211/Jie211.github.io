<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rain Drop</title>
  
  
  <link href="https://jie211.github.io/atom.xml" rel="self"/>
  
  <link href="https://jie211.github.io/"/>
  <updated>2020-09-29T14:56:42.581Z</updated>
  <id>https://jie211.github.io/</id>
  
  <author>
    <name>jie211</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>整理</title>
    <link href="https://jie211.github.io/2020/09/29/2020-09-29-clean-up/"/>
    <id>https://jie211.github.io/2020/09/29/2020-09-29-clean-up/</id>
    <published>2020-09-29T14:39:14.000Z</published>
    <updated>2020-09-29T14:56:42.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>对过去写的文字进行了整理。</p><a id="more"></a><div class="toc"><!-- toc --><!-- tocstop --></div><p>虽然没人看，但这些年辗转过几个框架，不同平台还是记了些东西，一些和电影有关的，一些和电脑有关。<br>但我别扭的性格总是让我很困扰，我想通过文字传达/记录/发泄一些东西，但总有觉得文字是很私人的东西，总是不能尽兴的表达。</p><p>碰巧在整理一些过去的代码，这里也就顺道整理了，大部分内容删掉了，一部分过去的电脑相关的东西也失去了时效性，索性隐藏了。</p><p>关掉了 disqus，之后有时间的话想把 CSS 也改了。</p><p>就这样。</p><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <summary type="html">整理</summary>
    
    
    
    <category term="blog" scheme="https://jie211.github.io/categories/blog/"/>
    
    
    <category term="live" scheme="https://jie211.github.io/tags/live/"/>
    
  </entry>
  
  <entry>
    <title>CUDA再入门 - 环境搭建</title>
    <link href="https://jie211.github.io/2019/11/24/2019-11-24-cuda-restart/"/>
    <id>https://jie211.github.io/2019/11/24/2019-11-24-cuda-restart/</id>
    <published>2019-11-24T04:50:14.000Z</published>
    <updated>2020-09-29T14:56:42.581Z</updated>
    
    <content type="html"><![CDATA[<link rel="stylesheet" type="text&#x2F;css" href="https://cdnjs.cloudflare.com/ajax/libs/KaTeX/0.5.1/katex.min.css"><p>在学校的时候虽然学习过 CUDA，但是总是要忙着打工并且有论文的压力，没能静下心来仔细的学好 CUDA，所以现在准备从零开始 CUDA 再入门</p><a id="more"></a><div class="toc"><!-- toc --><ul><li><a href="#qu-dong-he-cuda-toolkit">驱动和 CUDA Toolkit</a></li><li><a href="#nsight">nsight</a><ul><li><a href="#ubuntu">Ubuntu</a></li><li><a href="#macos">MacOS</a><ul><li><a href="#an-zhuang">安装</a></li><li><a href="#bian-yi">编译</a></li><li><a href="#clang-de-wen-ti">clang 的问题</a></li></ul></li></ul></li></ul><!-- tocstop --></div><h1><span id="qu-dong-he-cuda-toolkit">驱动和 CUDA Toolkit</span><a href="#qu-dong-he-cuda-toolkit" class="header-anchor">#</a></h1><p>之前一直认为装驱动是个很麻烦的事情。后来才知道那只是存在于 CentOS 的状况，当然可能别的 LinuxOS 也是如此，但是 Ubuntu 上装驱动真是简单到爆。所以在家里我果断的选择了以 Ubuntu 为基础的 elementaryOS，Ubuntu 上装 Nvidia 的驱动几乎是自动的，你只要用的是 N 卡自动就会装上 N 卡驱动了。</p><p>OK，于是接下来是 CUDA Toolkit，其本质是各类头文件，库和 nsight 相关程序还有 sample code。在下面的官网直接下载就行，现在的最新版本是 10.2 所以我选择了 Linux x86_64 Ubuntu 18.04 的 deb[local]。<br><a href="https://developer.nvidia.com/cuda-downloads">CUDA Toolkit 10.2 Download | NVIDIA Developer</a><br>就是个 deb 文件，按照提示安装就好</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">wget https://developer.download.nvidia.com/compute/cuda/repos/ubuntu1804/x86_64/cuda-ubuntu1804.pin</span><br><span class="line">sudo mv cuda-ubuntu1804.pin /etc/apt/preferences.d/cuda-repository-pin-600</span><br><span class="line">wget http://developer.download.nvidia.com/compute/cuda/10.2/Prod/local_installers/cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">sudo dpkg -i cuda-repo-ubuntu1804-10-2-local-10.2.89-440.33.01_1.0-1_amd64.deb</span><br><span class="line">sudo apt-key add /var/cuda-repo-10-2-local-10.2.89-440.33.01/7fa2af80.pub</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install cuda</span><br></pre></td></tr></tbody></table></figure><p>顺便我还准备在 MacOS 上也装上 Toolkit，虽然没有 N 卡 GPU 不能执行，但是有 Toolkit 就能编译了(虽然 clang 和 CUDA 之间还挺麻烦)，起码写代码能静态检查文法错误。MacOS 上装 Toolkit 就是个 dmg，所以普通的安装就行。<br>最好加上 path 就 ok。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=/Developer/NVIDIA/CUDA-10.2/bin<span class="variable">${PATH:+:${PATH}</span>}</span><br><span class="line"><span class="built_in">export</span> DYLD_LIBRARY_PATH=/Developer/NVIDIA/CUDA-10.2/lib<span class="variable">${DYLD_LIBRARY_PATH:+:${DYLD_LIBRARY_PATH}</span>}</span><br></pre></td></tr></tbody></table></figure><h1><span id="nsight">nsight</span><a href="#nsight" class="header-anchor">#</a></h1><p>这个真的是太坑了，因为 nsight 对 java 支持上的问题导致一般来说是不能正常启动的。</p><h2><span id="ubuntu">Ubuntu</span><a href="#ubuntu" class="header-anchor">#</a></h2><p>首先要装 java8 的 jre，linuxbrew 也行别的方法也行，最重要的是把 jre 放在 path 能通的地方</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PATH=<span class="string">"/usr/lib/jvm/java-8-openjdk-amd64/jre/bin:<span class="variable">$PATH</span>"</span></span><br></pre></td></tr></tbody></table></figure><p>或者就必须要在启动 nsight 的时候加上参数了，可以设成 alias。但是这样之后在图形化界面里通过图标启动就没用了。所以还是加 path 吧。</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">alias</span> nsight=<span class="string">'nsight -vm /usr/lib/jvm/java-8-openjdk-amd64/jre/bin/java'</span></span><br></pre></td></tr></tbody></table></figure><h2><span id="macos">MacOS</span><a href="#macos" class="header-anchor">#</a></h2><h3><span id="an-zhuang">安装</span><a href="#an-zhuang" class="header-anchor">#</a></h3><p>这个真是坑到炸，因为如果你 java 版本太高，你打开 nsight 的时候他不会推出，而是会 freeze，你还以为是别的原因导致的。。。<br>但其实官方说明里说的很清楚了</p><div class="tip">Note: JRE 1.8u152 or later is not supported for Nsight Eclipse Edition or Visual Profiler. You can find the JRE update 151 on the Oracle Download Archive site here: https://www.oracle.com/technetwork/java/javase/downloads/java-archive-javase8-2177648.html?printOnly=1.</div><p><a href="https://docs.nvidia.com/cuda/nsight-eclipse-edition-getting-started-guide/index.html">Nsight Eclipse Edition :: CUDA Toolkit Documentation</a></p><p>需要 JRE1.8u151 或以下的版本才行，如果装了更高的版本那就只有暂时把新版本删除之后下载旧的版本了</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo rm -fr /Library/Internet\ Plug-Ins/JavaAppletPlugin.plugin</span><br><span class="line">sudo rm -fr /Library/PreferencePanes/JavaControlPanel.prefPane</span><br><span class="line">sudo rm -fr ~/Library/Application\ Support/Oracle/Java</span><br></pre></td></tr></tbody></table></figure><p>下载 JRE 或者 JDK 其实都行 Oracle 官方的下载越来越恶心了，需要注册什么的。<br>这个 repo 提供全平台 JDK 和 JRE 的分流，毕竟不是官方的下载 所以下载之后最好对比下哈希值比较安全。<br><a href="https://github.com/frekele/oracle-java">GitHub - frekele/oracle-java: Oracle Java Binaries</a></p><h3><span id="bian-yi">编译</span><a href="#bian-yi" class="header-anchor">#</a></h3><p>也是坑，因为 nsight/eclipse 好像不知道你的 c/c++的 include path 在哪，所以需要手动加上去。新建项目后，对项目点右键，properties -&gt; C/C++ General -&gt; paths and Symbols &gt; Add<br>加上 c/c++的 include path 就行，path 可以通过对任意 c 或者 c++代码进行<br>编译时加上 verbose 的选项，在显示出来的冗余信息里就有</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc -v hoge.c</span><br><span class="line">g++ -v hoge.c</span><br></pre></td></tr></tbody></table></figure><h3><span id="clang-de-wen-ti">clang 的问题</span><a href="#clang-de-wen-ti" class="header-anchor">#</a></h3><p>clang 11.0.0 和 nvcc 合不来。。。<br>因为官方只支持 xcode10.1 和 clang/llvm10.0.0<br>解决方法应该是装低版本的 <code>Command_Line_Tools_macOS_10.13_for_Xcode_10.1.dmg</code></p><p>而且还能切换版本</p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># install version A</span></span><br><span class="line">mkdir -p ~/Command_Line_Tools/xcode_A</span><br><span class="line">sudo cp -R /Library/Developer/ ~/Command_Line_Tools/xcode_A</span><br><span class="line"><span class="comment"># install version B</span></span><br><span class="line">mkdir -p ~/Command_Line_Tools/xcode_B</span><br><span class="line">sudo cp -R /Library/Developer/ ~/Command_Line_Tools/xcode_B</span><br><span class="line"><span class="comment"># switch</span></span><br><span class="line">sudo xcode-select -s ~/Command_Line_Tools/xcode10_13/Developer/CommandLineTools</span><br><span class="line">clang --version</span><br><span class="line">Apple LLVM version 10.0.0 (clang-1000.10.44.4)</span><br><span class="line">Target: x86_64-apple-darwin18.7.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Users/gchen/Command_Line_Tools/xcode10_13/Developer/CommandLineTools/usr/bin</span><br><span class="line"></span><br><span class="line">sudo xcode-select -s ~/Command_Line_Tools/xcode11_2/Developer/CommandLineTools</span><br><span class="line">clang --version</span><br><span class="line">Apple clang version 11.0.0 (clang-1100.0.33.12)</span><br><span class="line">Target: x86_64-apple-darwin18.7.0</span><br><span class="line">Thread model: posix</span><br><span class="line">InstalledDir: /Users/gchen/Command_Line_Tools/xcode11_2/Developer/CommandLineTools/usr/bin</span><br></pre></td></tr></tbody></table></figure><p>而且 LLVM 和 nvcc 之间也有很多用法上的区别，详细可以看这个<br><a href="https://llvm.org/docs/CompileCudaWithLLVM.html">Compiling CUDA with clang — LLVM 10 documentation</a></p><figure class="highlight bash"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 不指定</span></span><br><span class="line">☁  ~  nvcc -v hoge.c</span><br><span class="line">nvcc fatal   : The version (<span class="string">'11.0'</span>) of the host compiler (<span class="string">'Apple clang'</span>) is not supported</span><br><span class="line"><span class="comment"># 通过homebrew装的gcc9</span></span><br><span class="line">☁  ~  nvcc -ccbin /usr/<span class="built_in">local</span>/bin/gcc -v hoge.c</span><br><span class="line">nvcc fatal   : GNU C/C++ compiler is no longer supported as a host compiler on Mac OS X.</span><br><span class="line"><span class="comment"># 苹果的gcc其实是clang</span></span><br><span class="line">☁  ~  nvcc -ccbin /usr/bin/gcc -v hoge.c</span><br><span class="line">nvcc fatal   : The version (<span class="string">'11.0'</span>) of the host compiler (<span class="string">'Apple clang'</span>) is not supported</span><br><span class="line"><span class="comment"># 苹果的clang</span></span><br><span class="line">☁  ~  nvcc -ccbin /usr/bin/clang -v hoge.c</span><br><span class="line">nvcc fatal   : The version (<span class="string">'11.0'</span>) of the host compiler (<span class="string">'Apple clang'</span>) is not supported</span><br></pre></td></tr></tbody></table></figure><script>        document.querySelectorAll('.github-emoji')          .forEach(el => {            if (!el.dataset.src) { return; }            const img = document.createElement('img');            img.style = 'display:none !important;';            img.src = el.dataset.src;            img.addEventListener('error', () => {              img.remove();              el.style.color = 'inherit';              el.style.backgroundImage = 'none';              el.style.background = 'none';            });            img.addEventListener('load', () => {              img.remove();            });            document.body.appendChild(img);          });      </script>]]></content>
    
    
    <summary type="html">CUDA再入门</summary>
    
    
    
    <category term="it" scheme="https://jie211.github.io/categories/it/"/>
    
    
    <category term="cuda" scheme="https://jie211.github.io/tags/cuda/"/>
    
  </entry>
  
</feed>
